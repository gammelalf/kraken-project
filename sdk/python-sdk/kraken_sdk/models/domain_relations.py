# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from pydantic import Field
from kraken_sdk.models.simple_domain import SimpleDomain
from kraken_sdk.models.simple_host import SimpleHost
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DomainRelations(BaseModel):
    """
    A domain's direct relations
    """ # noqa: E501
    source_domains: List[SimpleDomain] = Field(description="All domains which contain a `CNAME` record with this domain")
    target_domains: List[SimpleDomain] = Field(description="All domains this domain has `CNAME` records to")
    direct_hosts: List[SimpleHost] = Field(description="All hosts this domain has an `A` or `AAAA` record for")
    indirect_hosts: List[SimpleHost] = Field(description="All hosts any `target_domains` resolves to")
    __properties: ClassVar[List[str]] = ["source_domains", "target_domains", "direct_hosts", "indirect_hosts"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DomainRelations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in source_domains (list)
        _items = []
        if self.source_domains:
            for _item in self.source_domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['source_domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in target_domains (list)
        _items = []
        if self.target_domains:
            for _item in self.target_domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['target_domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in direct_hosts (list)
        _items = []
        if self.direct_hosts:
            for _item in self.direct_hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['direct_hosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in indirect_hosts (list)
        _items = []
        if self.indirect_hosts:
            for _item in self.indirect_hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['indirect_hosts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DomainRelations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source_domains": [SimpleDomain.from_dict(_item) for _item in obj.get("source_domains")] if obj.get("source_domains") is not None else None,
            "target_domains": [SimpleDomain.from_dict(_item) for _item in obj.get("target_domains")] if obj.get("target_domains") is not None else None,
            "direct_hosts": [SimpleHost.from_dict(_item) for _item in obj.get("direct_hosts")] if obj.get("direct_hosts") is not None else None,
            "indirect_hosts": [SimpleHost.from_dict(_item) for _item in obj.get("indirect_hosts")] if obj.get("indirect_hosts") is not None else None
        })
        return _obj


