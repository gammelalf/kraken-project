/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OsType } from './OsType';
import {
    OsTypeFromJSON,
    OsTypeFromJSONTyped,
    OsTypeToJSON,
} from './OsType';

/**
 * Representation of an OS detection result
 * @export
 * @interface FullOsDetectionResult
 */
export interface FullOsDetectionResult {
    /**
     * The primary key
     * @type {string}
     * @memberof FullOsDetectionResult
     */
    uuid: string;
    /**
     * The attack which produced this result
     * @type {string}
     * @memberof FullOsDetectionResult
     */
    attack: string;
    /**
     * The point in time, this result was produced
     * @type {Date}
     * @memberof FullOsDetectionResult
     */
    createdAt: Date;
    /**
     * The ip address a port was found on
     * @type {string}
     * @memberof FullOsDetectionResult
     */
    host: string;
    /**
     * 
     * @type {OsType}
     * @memberof FullOsDetectionResult
     */
    os: OsType;
    /**
     * Optional human-readable hints, newline separated (\n)
     * @type {string}
     * @memberof FullOsDetectionResult
     */
    hints: string;
    /**
     * Optional detected version numbers, separated by OR (`" OR "`)
     * @type {string}
     * @memberof FullOsDetectionResult
     */
    version: string;
}

/**
 * Check if a given object implements the FullOsDetectionResult interface.
 */
export function instanceOfFullOsDetectionResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "attack" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "os" in value;
    isInstance = isInstance && "hints" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function FullOsDetectionResultFromJSON(json: any): FullOsDetectionResult {
    return FullOsDetectionResultFromJSONTyped(json, false);
}

export function FullOsDetectionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullOsDetectionResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'attack': json['attack'],
        'createdAt': (new Date(json['created_at'])),
        'host': json['host'],
        'os': OsTypeFromJSON(json['os']),
        'hints': json['hints'],
        'version': json['version'],
    };
}

export function FullOsDetectionResultToJSON(value?: FullOsDetectionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'attack': value.attack,
        'created_at': (value.createdAt.toISOString()),
        'host': value.host,
        'os': OsTypeToJSON(value.os),
        'hints': value.hints,
        'version': value.version,
    };
}

