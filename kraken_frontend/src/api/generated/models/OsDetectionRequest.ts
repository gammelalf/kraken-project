/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * OS detection request
 * @export
 * @interface OsDetectionRequest
 */
export interface OsDetectionRequest {
    /**
     * The leech to use
     * 
     * Leave empty to use a random leech
     * @type {string}
     * @memberof OsDetectionRequest
     */
    leechUuid?: string | null;
    /**
     * The ip addresses / networks or domains to scan
     * @type {Array<string>}
     * @memberof OsDetectionRequest
     */
    targets: Array<string>;
    /**
     * set to skip open port detection and use this port for TCP fingerprinting
     * @type {number}
     * @memberof OsDetectionRequest
     */
    fingerprintPort?: number | null;
    /**
     * set to perform OS detection through SSH header
     * @type {number}
     * @memberof OsDetectionRequest
     */
    sshPort?: number | null;
    /**
     * timeout for TCP fingerprint detection task, in ms
     * @type {number}
     * @memberof OsDetectionRequest
     */
    fingerprintTimeout: number;
    /**
     * timeout for establishing an SSH connection, if ssh_port is set, in ms
     * @type {number}
     * @memberof OsDetectionRequest
     */
    sshConnectTimeout: number;
    /**
     * timeout for the full SSH os detection task, in ms
     * @type {number}
     * @memberof OsDetectionRequest
     */
    sshTimeout: number;
    /**
     * If fingerprint_port is not set, timeout for each port how long to wait for ACKs
     * @type {number}
     * @memberof OsDetectionRequest
     */
    portAckTimeout: number;
    /**
     * If fingerprint_port is not set, maximum parallel TCP SYN requests
     * @type {number}
     * @memberof OsDetectionRequest
     */
    portParallelSyns: number;
    /**
     * The workspace to execute the attack in
     * @type {string}
     * @memberof OsDetectionRequest
     */
    workspaceUuid: string;
    /**
     * The concurrent task limit
     * @type {number}
     * @memberof OsDetectionRequest
     */
    concurrentLimit: number;
}

/**
 * Check if a given object implements the OsDetectionRequest interface.
 */
export function instanceOfOsDetectionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "targets" in value;
    isInstance = isInstance && "fingerprintTimeout" in value;
    isInstance = isInstance && "sshConnectTimeout" in value;
    isInstance = isInstance && "sshTimeout" in value;
    isInstance = isInstance && "portAckTimeout" in value;
    isInstance = isInstance && "portParallelSyns" in value;
    isInstance = isInstance && "workspaceUuid" in value;
    isInstance = isInstance && "concurrentLimit" in value;

    return isInstance;
}

export function OsDetectionRequestFromJSON(json: any): OsDetectionRequest {
    return OsDetectionRequestFromJSONTyped(json, false);
}

export function OsDetectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OsDetectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'leechUuid': !exists(json, 'leech_uuid') ? undefined : json['leech_uuid'],
        'targets': json['targets'],
        'fingerprintPort': !exists(json, 'fingerprint_port') ? undefined : json['fingerprint_port'],
        'sshPort': !exists(json, 'ssh_port') ? undefined : json['ssh_port'],
        'fingerprintTimeout': json['fingerprint_timeout'],
        'sshConnectTimeout': json['ssh_connect_timeout'],
        'sshTimeout': json['ssh_timeout'],
        'portAckTimeout': json['port_ack_timeout'],
        'portParallelSyns': json['port_parallel_syns'],
        'workspaceUuid': json['workspace_uuid'],
        'concurrentLimit': json['concurrent_limit'],
    };
}

export function OsDetectionRequestToJSON(value?: OsDetectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'leech_uuid': value.leechUuid,
        'targets': value.targets,
        'fingerprint_port': value.fingerprintPort,
        'ssh_port': value.sshPort,
        'fingerprint_timeout': value.fingerprintTimeout,
        'ssh_connect_timeout': value.sshConnectTimeout,
        'ssh_timeout': value.sshTimeout,
        'port_ack_timeout': value.portAckTimeout,
        'port_parallel_syns': value.portParallelSyns,
        'workspace_uuid': value.workspaceUuid,
        'concurrent_limit': value.concurrentLimit,
    };
}

