/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimpleUser } from './SimpleUser';
import {
    SimpleUserFromJSON,
    SimpleUserFromJSONTyped,
    SimpleUserToJSON,
} from './SimpleUser';

/**
 * A manually inserted domain
 * @export
 * @interface ManualInsertOneOf
 */
export interface ManualInsertOneOf {
    /**
     * The inserted domain
     * @type {string}
     * @memberof ManualInsertOneOf
     */
    domain: string;
    /**
     * 
     * @type {SimpleUser}
     * @memberof ManualInsertOneOf
     */
    user: SimpleUser;
    /**
     * The workspace the domain was inserted to
     * @type {string}
     * @memberof ManualInsertOneOf
     */
    workspace: string;
    /**
     * The point in time, the domain was inserted
     * @type {Date}
     * @memberof ManualInsertOneOf
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ManualInsertOneOf
     */
    type: ManualInsertOneOfTypeEnum;
}


/**
 * @export
 */
export const ManualInsertOneOfTypeEnum = {
    Domain: 'Domain'
} as const;
export type ManualInsertOneOfTypeEnum = typeof ManualInsertOneOfTypeEnum[keyof typeof ManualInsertOneOfTypeEnum];


/**
 * Check if a given object implements the ManualInsertOneOf interface.
 */
export function instanceOfManualInsertOneOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ManualInsertOneOfFromJSON(json: any): ManualInsertOneOf {
    return ManualInsertOneOfFromJSONTyped(json, false);
}

export function ManualInsertOneOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManualInsertOneOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': json['domain'],
        'user': SimpleUserFromJSON(json['user']),
        'workspace': json['workspace'],
        'createdAt': (new Date(json['created_at'])),
        'type': json['type'],
    };
}

export function ManualInsertOneOfToJSON(value?: ManualInsertOneOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': value.domain,
        'user': SimpleUserToJSON(value.user),
        'workspace': value.workspace,
        'created_at': (value.createdAt.toISOString()),
        'type': value.type,
    };
}

