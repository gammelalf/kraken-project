/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A simple representation of a dns resolution result
 * @export
 * @interface SimpleDnsResolutionResult
 */
export interface SimpleDnsResolutionResult {
    /**
     * The primary key
     * @type {string}
     * @memberof SimpleDnsResolutionResult
     */
    uuid: string;
    /**
     * The attack which produced this result
     * @type {string}
     * @memberof SimpleDnsResolutionResult
     */
    attack: string;
    /**
     * The point in time, this result was produced
     * @type {Date}
     * @memberof SimpleDnsResolutionResult
     */
    createdAt: Date;
    /**
     * The source address
     * @type {string}
     * @memberof SimpleDnsResolutionResult
     */
    source: string;
    /**
     * The destination address
     * @type {string}
     * @memberof SimpleDnsResolutionResult
     */
    destination: string;
    /**
     * The type of DNS Record
     * @type {string}
     * @memberof SimpleDnsResolutionResult
     */
    dnsRecordType: SimpleDnsResolutionResultDnsRecordTypeEnum;
}


/**
 * @export
 */
export const SimpleDnsResolutionResultDnsRecordTypeEnum = {
    A: 'A',
    Aaaa: 'Aaaa',
    Caa: 'Caa',
    Cname: 'Cname',
    Mx: 'Mx',
    Tlsa: 'Tlsa',
    Txt: 'Txt'
} as const;
export type SimpleDnsResolutionResultDnsRecordTypeEnum = typeof SimpleDnsResolutionResultDnsRecordTypeEnum[keyof typeof SimpleDnsResolutionResultDnsRecordTypeEnum];


/**
 * Check if a given object implements the SimpleDnsResolutionResult interface.
 */
export function instanceOfSimpleDnsResolutionResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "attack" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "dnsRecordType" in value;

    return isInstance;
}

export function SimpleDnsResolutionResultFromJSON(json: any): SimpleDnsResolutionResult {
    return SimpleDnsResolutionResultFromJSONTyped(json, false);
}

export function SimpleDnsResolutionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleDnsResolutionResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'attack': json['attack'],
        'createdAt': (new Date(json['created_at'])),
        'source': json['source'],
        'destination': json['destination'],
        'dnsRecordType': json['dns_record_type'],
    };
}

export function SimpleDnsResolutionResultToJSON(value?: SimpleDnsResolutionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'attack': value.attack,
        'created_at': (value.createdAt.toISOString()),
        'source': value.source,
        'destination': value.destination,
        'dns_record_type': value.dnsRecordType,
    };
}

