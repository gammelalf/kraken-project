/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Color } from './Color';
import {
    ColorFromJSON,
    ColorFromJSONTyped,
    ColorToJSON,
} from './Color';

/**
 * A category findings and finding definitions can be categorized by
 * @export
 * @interface SimpleFindingCategory
 */
export interface SimpleFindingCategory {
    /**
     * The category's uuid
     * @type {string}
     * @memberof SimpleFindingCategory
     */
    uuid: string;
    /**
     * The category's name
     * @type {string}
     * @memberof SimpleFindingCategory
     */
    name: string;
    /**
     * 
     * @type {Color}
     * @memberof SimpleFindingCategory
     */
    color: Color;
}

/**
 * Check if a given object implements the SimpleFindingCategory interface.
 */
export function instanceOfSimpleFindingCategory(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "color" in value;

    return isInstance;
}

export function SimpleFindingCategoryFromJSON(json: any): SimpleFindingCategory {
    return SimpleFindingCategoryFromJSONTyped(json, false);
}

export function SimpleFindingCategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleFindingCategory {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'name': json['name'],
        'color': ColorFromJSON(json['color']),
    };
}

export function SimpleFindingCategoryToJSON(value?: SimpleFindingCategory | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'color': ColorToJSON(value.color),
    };
}

