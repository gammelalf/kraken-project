/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StartTLSProtocol } from './StartTLSProtocol';
import {
    StartTLSProtocolFromJSON,
    StartTLSProtocolFromJSONTyped,
    StartTLSProtocolToJSON,
} from './StartTLSProtocol';

/**
 * Request to run testssl
 * @export
 * @interface TestSSLRequest
 */
export interface TestSSLRequest {
    /**
     * The leech to use
     * 
     * Leave empty to use a random leech
     * @type {string}
     * @memberof TestSSLRequest
     */
    leechUuid?: string | null;
    /**
     * The workspace to execute the attack in
     * @type {string}
     * @memberof TestSSLRequest
     */
    workspaceUuid: string;
    /**
     * The domain to scan
     * @type {string}
     * @memberof TestSSLRequest
     */
    uri: string;
    /**
     * Timeout for TCP handshakes in seconds
     * @type {number}
     * @memberof TestSSLRequest
     */
    connectTimeout?: number | null;
    /**
     * Timeout for `openssl` connections in seconds
     * @type {number}
     * @memberof TestSSLRequest
     */
    opensslTimeout?: number | null;
    /**
     * Set the `BASICAUTH` header when checking http headers
     * @type {Array<string>}
     * @memberof TestSSLRequest
     */
    basicAuth?: Array<string> | null;
    /**
     * 
     * @type {StartTLSProtocol}
     * @memberof TestSSLRequest
     */
    starttls?: StartTLSProtocol | null;
}

/**
 * Check if a given object implements the TestSSLRequest interface.
 */
export function instanceOfTestSSLRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workspaceUuid" in value;
    isInstance = isInstance && "uri" in value;

    return isInstance;
}

export function TestSSLRequestFromJSON(json: any): TestSSLRequest {
    return TestSSLRequestFromJSONTyped(json, false);
}

export function TestSSLRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestSSLRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'leechUuid': !exists(json, 'leech_uuid') ? undefined : json['leech_uuid'],
        'workspaceUuid': json['workspace_uuid'],
        'uri': json['uri'],
        'connectTimeout': !exists(json, 'connect_timeout') ? undefined : json['connect_timeout'],
        'opensslTimeout': !exists(json, 'openssl_timeout') ? undefined : json['openssl_timeout'],
        'basicAuth': !exists(json, 'basic_auth') ? undefined : json['basic_auth'],
        'starttls': !exists(json, 'starttls') ? undefined : StartTLSProtocolFromJSON(json['starttls']),
    };
}

export function TestSSLRequestToJSON(value?: TestSSLRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'leech_uuid': value.leechUuid,
        'workspace_uuid': value.workspaceUuid,
        'uri': value.uri,
        'connect_timeout': value.connectTimeout,
        'openssl_timeout': value.opensslTimeout,
        'basic_auth': value.basicAuth,
        'starttls': StartTLSProtocolToJSON(value.starttls),
    };
}

