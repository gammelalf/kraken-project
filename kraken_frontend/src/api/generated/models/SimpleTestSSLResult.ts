/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A simple representation of a testssl result
 * @export
 * @interface SimpleTestSSLResult
 */
export interface SimpleTestSSLResult {
    /**
     * The primary key
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    uuid: string;
    /**
     * The attack which produced this result
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    attack: string;
    /**
     * The point in time, this result was produced
     * @type {Date}
     * @memberof SimpleTestSSLResult
     */
    createdAt: Date;
    /**
     * The original user target this result belongs to
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    targetHost: string;
    /**
     * The scanned ip address
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    ip: string;
    /**
     * The scanned port
     * @type {number}
     * @memberof SimpleTestSSLResult
     */
    port: number;
    /**
     * The ip address' rDNS name
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    rdns: string;
    /**
     * The detected service
     * @type {string}
     * @memberof SimpleTestSSLResult
     */
    service: string;
}

/**
 * Check if a given object implements the SimpleTestSSLResult interface.
 */
export function instanceOfSimpleTestSSLResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "attack" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "targetHost" in value;
    isInstance = isInstance && "ip" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "rdns" in value;
    isInstance = isInstance && "service" in value;

    return isInstance;
}

export function SimpleTestSSLResultFromJSON(json: any): SimpleTestSSLResult {
    return SimpleTestSSLResultFromJSONTyped(json, false);
}

export function SimpleTestSSLResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleTestSSLResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'attack': json['attack'],
        'createdAt': (new Date(json['created_at'])),
        'targetHost': json['target_host'],
        'ip': json['ip'],
        'port': json['port'],
        'rdns': json['rdns'],
        'service': json['service'],
    };
}

export function SimpleTestSSLResultToJSON(value?: SimpleTestSSLResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'attack': value.attack,
        'created_at': (value.createdAt.toISOString()),
        'target_host': value.targetHost,
        'ip': value.ip,
        'port': value.port,
        'rdns': value.rdns,
        'service': value.service,
    };
}

