/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FindingSeverity } from './FindingSeverity';
import {
    FindingSeverityFromJSON,
    FindingSeverityFromJSONTyped,
    FindingSeverityToJSON,
} from './FindingSeverity';
import type { SimpleFindingCategory } from './SimpleFindingCategory';
import {
    SimpleFindingCategoryFromJSON,
    SimpleFindingCategoryFromJSONTyped,
    SimpleFindingCategoryToJSON,
} from './SimpleFindingCategory';

/**
 * A simple finding
 * @export
 * @interface SimpleFinding
 */
export interface SimpleFinding {
    /**
     * The uuid of the finding
     * @type {string}
     * @memberof SimpleFinding
     */
    uuid: string;
    /**
     * The uuid of the finding definition
     * @type {string}
     * @memberof SimpleFinding
     */
    definition: string;
    /**
     * The name of the finding definition
     * @type {string}
     * @memberof SimpleFinding
     */
    name: string;
    /**
     * The CVE of the finding definition
     * @type {string}
     * @memberof SimpleFinding
     */
    cve?: string | null;
    /**
     * 
     * @type {FindingSeverity}
     * @memberof SimpleFinding
     */
    severity: FindingSeverity;
    /**
     * A weight without semantic used to sort findings
     * @type {number}
     * @memberof SimpleFinding
     */
    sortingWeight: number;
    /**
     * The count of affected aggregations
     * @type {number}
     * @memberof SimpleFinding
     */
    affectedCount: number;
    /**
     * The point in time this finding definition was created
     * @type {Date}
     * @memberof SimpleFinding
     */
    createdAt: Date;
    /**
     * The list of categories this finding falls into
     * @type {Array<SimpleFindingCategory>}
     * @memberof SimpleFinding
     */
    categories: Array<SimpleFindingCategory>;
}

/**
 * Check if a given object implements the SimpleFinding interface.
 */
export function instanceOfSimpleFinding(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "definition" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "severity" in value;
    isInstance = isInstance && "sortingWeight" in value;
    isInstance = isInstance && "affectedCount" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "categories" in value;

    return isInstance;
}

export function SimpleFindingFromJSON(json: any): SimpleFinding {
    return SimpleFindingFromJSONTyped(json, false);
}

export function SimpleFindingFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleFinding {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'definition': json['definition'],
        'name': json['name'],
        'cve': !exists(json, 'cve') ? undefined : json['cve'],
        'severity': FindingSeverityFromJSON(json['severity']),
        'sortingWeight': json['sorting_weight'],
        'affectedCount': json['affected_count'],
        'createdAt': (new Date(json['created_at'])),
        'categories': ((json['categories'] as Array<any>).map(SimpleFindingCategoryFromJSON)),
    };
}

export function SimpleFindingToJSON(value?: SimpleFinding | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'definition': value.definition,
        'name': value.name,
        'cve': value.cve,
        'severity': FindingSeverityToJSON(value.severity),
        'sorting_weight': value.sortingWeight,
        'affected_count': value.affectedCount,
        'created_at': (value.createdAt.toISOString()),
        'categories': ((value.categories as Array<any>).map(SimpleFindingCategoryToJSON)),
    };
}

