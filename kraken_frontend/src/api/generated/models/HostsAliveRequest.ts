/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Host Alive check request
 * @export
 * @interface HostsAliveRequest
 */
export interface HostsAliveRequest {
    /**
     * The leech to use
     * 
     * Leave empty to use a random leech
     * @type {string}
     * @memberof HostsAliveRequest
     */
    leechUuid?: string | null;
    /**
     * The ip addresses / networks or domains to scan
     * @type {Array<string>}
     * @memberof HostsAliveRequest
     */
    targets: Array<string>;
    /**
     * The time to wait until a host is considered down.
     * 
     * The timeout is specified in milliseconds.
     * @type {number}
     * @memberof HostsAliveRequest
     */
    timeout: number;
    /**
     * The concurrent task limit
     * @type {number}
     * @memberof HostsAliveRequest
     */
    concurrentLimit: number;
    /**
     * The workspace to execute the attack in
     * @type {string}
     * @memberof HostsAliveRequest
     */
    workspaceUuid: string;
}

/**
 * Check if a given object implements the HostsAliveRequest interface.
 */
export function instanceOfHostsAliveRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "targets" in value;
    isInstance = isInstance && "timeout" in value;
    isInstance = isInstance && "concurrentLimit" in value;
    isInstance = isInstance && "workspaceUuid" in value;

    return isInstance;
}

export function HostsAliveRequestFromJSON(json: any): HostsAliveRequest {
    return HostsAliveRequestFromJSONTyped(json, false);
}

export function HostsAliveRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): HostsAliveRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'leechUuid': !exists(json, 'leech_uuid') ? undefined : json['leech_uuid'],
        'targets': json['targets'],
        'timeout': json['timeout'],
        'concurrentLimit': json['concurrent_limit'],
        'workspaceUuid': json['workspace_uuid'],
    };
}

export function HostsAliveRequestToJSON(value?: HostsAliveRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'leech_uuid': value.leechUuid,
        'targets': value.targets,
        'timeout': value.timeout,
        'concurrent_limit': value.concurrentLimit,
        'workspace_uuid': value.workspaceUuid,
    };
}

