/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ManualServiceCertainty } from './ManualServiceCertainty';
import {
    ManualServiceCertaintyFromJSON,
    ManualServiceCertaintyFromJSONTyped,
    ManualServiceCertaintyToJSON,
} from './ManualServiceCertainty';
import type { SimpleUser } from './SimpleUser';
import {
    SimpleUserFromJSON,
    SimpleUserFromJSONTyped,
    SimpleUserToJSON,
} from './SimpleUser';

/**
 * A manually inserted service
 * @export
 * @interface ManualInsertOneOf3
 */
export interface ManualInsertOneOf3 {
    /**
     * The inserted service
     * @type {string}
     * @memberof ManualInsertOneOf3
     */
    name: string;
    /**
     * The service's version
     * @type {string}
     * @memberof ManualInsertOneOf3
     */
    version?: string | null;
    /**
     * 
     * @type {ManualServiceCertainty}
     * @memberof ManualInsertOneOf3
     */
    certainty: ManualServiceCertainty;
    /**
     * The service's port
     * @type {number}
     * @memberof ManualInsertOneOf3
     */
    port?: number | null;
    /**
     * The host's ip address
     * @type {string}
     * @memberof ManualInsertOneOf3
     */
    host: string;
    /**
     * 
     * @type {SimpleUser}
     * @memberof ManualInsertOneOf3
     */
    user: SimpleUser;
    /**
     * The workspace the service was inserted to
     * @type {string}
     * @memberof ManualInsertOneOf3
     */
    workspace: string;
    /**
     * The point in time, the service was inserted
     * @type {Date}
     * @memberof ManualInsertOneOf3
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ManualInsertOneOf3
     */
    type: ManualInsertOneOf3TypeEnum;
}


/**
 * @export
 */
export const ManualInsertOneOf3TypeEnum = {
    Service: 'Service'
} as const;
export type ManualInsertOneOf3TypeEnum = typeof ManualInsertOneOf3TypeEnum[keyof typeof ManualInsertOneOf3TypeEnum];


/**
 * Check if a given object implements the ManualInsertOneOf3 interface.
 */
export function instanceOfManualInsertOneOf3(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "certainty" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ManualInsertOneOf3FromJSON(json: any): ManualInsertOneOf3 {
    return ManualInsertOneOf3FromJSONTyped(json, false);
}

export function ManualInsertOneOf3FromJSONTyped(json: any, ignoreDiscriminator: boolean): ManualInsertOneOf3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'certainty': ManualServiceCertaintyFromJSON(json['certainty']),
        'port': !exists(json, 'port') ? undefined : json['port'],
        'host': json['host'],
        'user': SimpleUserFromJSON(json['user']),
        'workspace': json['workspace'],
        'createdAt': (new Date(json['created_at'])),
        'type': json['type'],
    };
}

export function ManualInsertOneOf3ToJSON(value?: ManualInsertOneOf3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'version': value.version,
        'certainty': ManualServiceCertaintyToJSON(value.certainty),
        'port': value.port,
        'host': value.host,
        'user': SimpleUserToJSON(value.user),
        'workspace': value.workspace,
        'created_at': (value.createdAt.toISOString()),
        'type': value.type,
    };
}

