/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DomainCertainty } from './DomainCertainty';
import {
    DomainCertaintyFromJSON,
    DomainCertaintyFromJSONTyped,
    DomainCertaintyToJSON,
} from './DomainCertainty';
import type { SimpleAggregationSource } from './SimpleAggregationSource';
import {
    SimpleAggregationSourceFromJSON,
    SimpleAggregationSourceFromJSONTyped,
    SimpleAggregationSourceToJSON,
} from './SimpleAggregationSource';
import type { SimpleTag } from './SimpleTag';
import {
    SimpleTagFromJSON,
    SimpleTagFromJSONTyped,
    SimpleTagToJSON,
} from './SimpleTag';

/**
 * A full representation of a domain in a workspace
 * @export
 * @interface FullDomain
 */
export interface FullDomain {
    /**
     * The primary key of the domain
     * @type {string}
     * @memberof FullDomain
     */
    uuid: string;
    /**
     * The domain's name
     * @type {string}
     * @memberof FullDomain
     */
    domain: string;
    /**
     * A comment
     * @type {string}
     * @memberof FullDomain
     */
    comment: string;
    /**
     * The workspace this domain is in
     * @type {string}
     * @memberof FullDomain
     */
    workspace: string;
    /**
     * The list of tags this domain has attached to
     * @type {Array<SimpleTag>}
     * @memberof FullDomain
     */
    tags: Array<SimpleTag>;
    /**
     * 
     * @type {SimpleAggregationSource}
     * @memberof FullDomain
     */
    sources: SimpleAggregationSource;
    /**
     * The point in time, the record was created
     * @type {Date}
     * @memberof FullDomain
     */
    createdAt: Date;
    /**
     * 
     * @type {DomainCertainty}
     * @memberof FullDomain
     */
    certainty: DomainCertainty;
}

/**
 * Check if a given object implements the FullDomain interface.
 */
export function instanceOfFullDomain(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "comment" in value;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "sources" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "certainty" in value;

    return isInstance;
}

export function FullDomainFromJSON(json: any): FullDomain {
    return FullDomainFromJSONTyped(json, false);
}

export function FullDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'domain': json['domain'],
        'comment': json['comment'],
        'workspace': json['workspace'],
        'tags': ((json['tags'] as Array<any>).map(SimpleTagFromJSON)),
        'sources': SimpleAggregationSourceFromJSON(json['sources']),
        'createdAt': (new Date(json['created_at'])),
        'certainty': DomainCertaintyFromJSON(json['certainty']),
    };
}

export function FullDomainToJSON(value?: FullDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'domain': value.domain,
        'comment': value.comment,
        'workspace': value.workspace,
        'tags': ((value.tags as Array<any>).map(SimpleTagToJSON)),
        'sources': SimpleAggregationSourceToJSON(value.sources),
        'created_at': (value.createdAt.toISOString()),
        'certainty': DomainCertaintyToJSON(value.certainty),
    };
}

