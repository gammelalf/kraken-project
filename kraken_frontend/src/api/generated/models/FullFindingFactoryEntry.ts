/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FindingFactoryIdentifier } from './FindingFactoryIdentifier';
import {
    FindingFactoryIdentifierFromJSON,
    FindingFactoryIdentifierFromJSONTyped,
    FindingFactoryIdentifierToJSON,
} from './FindingFactoryIdentifier';
import type { SimpleFindingDefinition } from './SimpleFindingDefinition';
import {
    SimpleFindingDefinitionFromJSON,
    SimpleFindingDefinitionFromJSONTyped,
    SimpleFindingDefinitionToJSON,
} from './SimpleFindingDefinition';

/**
 * Settings mapping an identifier to a finding definition
 * 
 * An identifier is an enum variant which identifies one kind of issue,
 * the finding factory might create a finding for.
 * 
 * If the finding factory detects an issue it will look up its identifier's finding definition
 * and create a finding using this definition (if it found any).
 * @export
 * @interface FullFindingFactoryEntry
 */
export interface FullFindingFactoryEntry {
    /**
     * 
     * @type {FindingFactoryIdentifier}
     * @memberof FullFindingFactoryEntry
     */
    identifier: FindingFactoryIdentifier;
    /**
     * 
     * @type {SimpleFindingDefinition}
     * @memberof FullFindingFactoryEntry
     */
    finding?: SimpleFindingDefinition | null;
}

/**
 * Check if a given object implements the FullFindingFactoryEntry interface.
 */
export function instanceOfFullFindingFactoryEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;

    return isInstance;
}

export function FullFindingFactoryEntryFromJSON(json: any): FullFindingFactoryEntry {
    return FullFindingFactoryEntryFromJSONTyped(json, false);
}

export function FullFindingFactoryEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullFindingFactoryEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': FindingFactoryIdentifierFromJSON(json['identifier']),
        'finding': !exists(json, 'finding') ? undefined : SimpleFindingDefinitionFromJSON(json['finding']),
    };
}

export function FullFindingFactoryEntryToJSON(value?: FullFindingFactoryEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': FindingFactoryIdentifierToJSON(value.identifier),
        'finding': SimpleFindingDefinitionToJSON(value.finding),
    };
}

