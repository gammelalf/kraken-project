/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    EditorTargetOneOf,
    instanceOfEditorTargetOneOf,
    EditorTargetOneOfFromJSON,
    EditorTargetOneOfFromJSONTyped,
    EditorTargetOneOfToJSON,
} from './EditorTargetOneOf';
import {
    EditorTargetOneOf1,
    instanceOfEditorTargetOneOf1,
    EditorTargetOneOf1FromJSON,
    EditorTargetOneOf1FromJSONTyped,
    EditorTargetOneOf1ToJSON,
} from './EditorTargetOneOf1';
import {
    EditorTargetOneOf2,
    instanceOfEditorTargetOneOf2,
    EditorTargetOneOf2FromJSON,
    EditorTargetOneOf2FromJSONTyped,
    EditorTargetOneOf2ToJSON,
} from './EditorTargetOneOf2';
import {
    EditorTargetOneOf3,
    instanceOfEditorTargetOneOf3,
    EditorTargetOneOf3FromJSON,
    EditorTargetOneOf3FromJSONTyped,
    EditorTargetOneOf3ToJSON,
} from './EditorTargetOneOf3';

/**
 * @type EditorTarget
 * The target of the editor
 * 
 * Used to specify the target for the editor, for example the
 * specific section in a [FindingDefinition]
 * @export
 */
export type EditorTarget = EditorTargetOneOf | EditorTargetOneOf1 | EditorTargetOneOf2 | EditorTargetOneOf3;

export function EditorTargetFromJSON(json: any): EditorTarget {
    return EditorTargetFromJSONTyped(json, false);
}

export function EditorTargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): EditorTarget {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return { ...EditorTargetOneOfFromJSONTyped(json, true), ...EditorTargetOneOf1FromJSONTyped(json, true), ...EditorTargetOneOf2FromJSONTyped(json, true), ...EditorTargetOneOf3FromJSONTyped(json, true) };
}

export function EditorTargetToJSON(value?: EditorTarget | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (instanceOfEditorTargetOneOf(value)) {
        return EditorTargetOneOfToJSON(value as EditorTargetOneOf);
    }
    if (instanceOfEditorTargetOneOf1(value)) {
        return EditorTargetOneOf1ToJSON(value as EditorTargetOneOf1);
    }
    if (instanceOfEditorTargetOneOf2(value)) {
        return EditorTargetOneOf2ToJSON(value as EditorTargetOneOf2);
    }
    if (instanceOfEditorTargetOneOf3(value)) {
        return EditorTargetOneOf3ToJSON(value as EditorTargetOneOf3);
    }

    return {};
}

