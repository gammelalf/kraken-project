/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimpleHost } from './SimpleHost';
import {
    SimpleHostFromJSON,
    SimpleHostFromJSONTyped,
    SimpleHostToJSON,
} from './SimpleHost';
import type { SimpleService } from './SimpleService';
import {
    SimpleServiceFromJSON,
    SimpleServiceFromJSONTyped,
    SimpleServiceToJSON,
} from './SimpleService';

/**
 * A port's direct relations
 * @export
 * @interface PortRelations
 */
export interface PortRelations {
    /**
     * 
     * @type {SimpleHost}
     * @memberof PortRelations
     */
    host: SimpleHost;
    /**
     * Services listening on this port
     * @type {Array<SimpleService>}
     * @memberof PortRelations
     */
    services: Array<SimpleService>;
}

/**
 * Check if a given object implements the PortRelations interface.
 */
export function instanceOfPortRelations(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "services" in value;

    return isInstance;
}

export function PortRelationsFromJSON(json: any): PortRelations {
    return PortRelationsFromJSONTyped(json, false);
}

export function PortRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortRelations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'host': SimpleHostFromJSON(json['host']),
        'services': ((json['services'] as Array<any>).map(SimpleServiceFromJSON)),
    };
}

export function PortRelationsToJSON(value?: PortRelations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'host': SimpleHostToJSON(value.host),
        'services': ((value.services as Array<any>).map(SimpleServiceToJSON)),
    };
}

