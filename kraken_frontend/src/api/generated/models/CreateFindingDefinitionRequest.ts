/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FindingSeverity } from './FindingSeverity';
import {
    FindingSeverityFromJSON,
    FindingSeverityFromJSONTyped,
    FindingSeverityToJSON,
} from './FindingSeverity';

/**
 * The request to create a new finding definition
 * @export
 * @interface CreateFindingDefinitionRequest
 */
export interface CreateFindingDefinitionRequest {
    /**
     * Name of the new finding definition
     * 
     * This must be unique
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    name: string;
    /**
     * 
     * @type {FindingSeverity}
     * @memberof CreateFindingDefinitionRequest
     */
    severity: FindingSeverity;
    /**
     * Short summary of the finding
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    summary: string;
    /**
     * Optional linked CVE
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    cve?: string | null;
    /**
     * The full description of the finding
     * 
     * This should include the cause of the finding
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    description: string;
    /**
     * The impact of the finding in general.
     * 
     * The impact for a specific environment should be described in the linked finding
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    impact: string;
    /**
     * How is remediation possible in general?
     * 
     * For example when using weak ciphers, the easiest remediation might be to just
     * rework the process of creating a new certificate and use safer parameters
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    remediation: string;
    /**
     * Any references to get more information about the definition of a finding.
     * 
     * Can link to resources like Mitre's Attack or CME explanations, etc.
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    references: string;
    /**
     * Expected time duration required for the remediation
     * @type {string}
     * @memberof CreateFindingDefinitionRequest
     */
    remediationDuration: string;
    /**
     * List of categories
     * @type {Array<string>}
     * @memberof CreateFindingDefinitionRequest
     */
    categories: Array<string>;
}

/**
 * Check if a given object implements the CreateFindingDefinitionRequest interface.
 */
export function instanceOfCreateFindingDefinitionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "severity" in value;
    isInstance = isInstance && "summary" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "impact" in value;
    isInstance = isInstance && "remediation" in value;
    isInstance = isInstance && "references" in value;
    isInstance = isInstance && "remediationDuration" in value;
    isInstance = isInstance && "categories" in value;

    return isInstance;
}

export function CreateFindingDefinitionRequestFromJSON(json: any): CreateFindingDefinitionRequest {
    return CreateFindingDefinitionRequestFromJSONTyped(json, false);
}

export function CreateFindingDefinitionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateFindingDefinitionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'severity': FindingSeverityFromJSON(json['severity']),
        'summary': json['summary'],
        'cve': !exists(json, 'cve') ? undefined : json['cve'],
        'description': json['description'],
        'impact': json['impact'],
        'remediation': json['remediation'],
        'references': json['references'],
        'remediationDuration': json['remediation_duration'],
        'categories': json['categories'],
    };
}

export function CreateFindingDefinitionRequestToJSON(value?: CreateFindingDefinitionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'severity': FindingSeverityToJSON(value.severity),
        'summary': value.summary,
        'cve': value.cve,
        'description': value.description,
        'impact': value.impact,
        'remediation': value.remediation,
        'references': value.references,
        'remediation_duration': value.remediationDuration,
        'categories': value.categories,
    };
}

