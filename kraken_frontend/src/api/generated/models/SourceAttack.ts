/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimplePortGuesserResult } from './SimplePortGuesserResult';
import {
    SimplePortGuesserResultFromJSON,
    SimplePortGuesserResultFromJSONTyped,
    SimplePortGuesserResultToJSON,
} from './SimplePortGuesserResult';
import type { SimpleUser } from './SimpleUser';
import {
    SimpleUserFromJSON,
    SimpleUserFromJSONTyped,
    SimpleUserToJSON,
} from './SimpleUser';
import type { SourceAttackResult } from './SourceAttackResult';
import {
    SourceAttackResultFromJSON,
    SourceAttackResultFromJSONTyped,
    SourceAttackResultToJSON,
} from './SourceAttackResult';

/**
 * Copy of [`SimpleAttack`](crate::api::handler::attacks::SimpleAttack) with an added `results` field
 * @export
 * @interface SourceAttack
 */
export type SourceAttack = SourceAttackResult & {
    /**
     * The identifier of the attack
     * @type {string}
     * @memberof SourceAttack
     */
    uuid: string;
    /**
     * The workspace this attack is attached to
     * @type {string}
     * @memberof SourceAttack
     */
    workspaceUuid: string;
    /**
     * 
     * @type {SimpleUser}
     * @memberof SourceAttack
     */
    startedBy: SimpleUser;
    /**
     * If this is None, the attack is still running
     * @type {Date}
     * @memberof SourceAttack
     */
    finishedAt?: Date | null;
    /**
     * If this field is set, the attack has finished with an error
     * @type {string}
     * @memberof SourceAttack
     */
    error?: string | null;
    /**
     * The point in time this attack was started
     * @type {Date}
     * @memberof SourceAttack
     */
    createdAt: Date;
}



/**
 * Check if a given object implements the SourceAttack interface.
 */
export function instanceOfSourceAttack(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "workspaceUuid" in value;
    isInstance = isInstance && "startedBy" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function SourceAttackFromJSON(json: any): SourceAttack {
    return SourceAttackFromJSONTyped(json, false);
}

export function SourceAttackFromJSONTyped(json: any, ignoreDiscriminator: boolean): SourceAttack {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...SourceAttackResultFromJSONTyped(json, ignoreDiscriminator),
        'uuid': json['uuid'],
        'workspaceUuid': json['workspace_uuid'],
        'startedBy': SimpleUserFromJSON(json['started_by']),
        'finishedAt': !exists(json, 'finished_at') ? undefined : (json['finished_at'] === null ? null : new Date(json['finished_at'])),
        'error': !exists(json, 'error') ? undefined : json['error'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function SourceAttackToJSON(value?: SourceAttack | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...SourceAttackResultToJSON(value),
        'uuid': value.uuid,
        'workspace_uuid': value.workspaceUuid,
        'started_by': SimpleUserToJSON(value.startedBy),
        'finished_at': value.finishedAt === undefined ? undefined : (value.finishedAt === null ? null : value.finishedAt.toISOString()),
        'error': value.error,
        'created_at': (value.createdAt.toISOString()),
    };
}

