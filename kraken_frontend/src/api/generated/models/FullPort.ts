/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FindingSeverity } from './FindingSeverity';
import {
    FindingSeverityFromJSON,
    FindingSeverityFromJSONTyped,
    FindingSeverityToJSON,
} from './FindingSeverity';
import type { PortCertainty } from './PortCertainty';
import {
    PortCertaintyFromJSON,
    PortCertaintyFromJSONTyped,
    PortCertaintyToJSON,
} from './PortCertainty';
import type { PortProtocol } from './PortProtocol';
import {
    PortProtocolFromJSON,
    PortProtocolFromJSONTyped,
    PortProtocolToJSON,
} from './PortProtocol';
import type { SimpleAggregationSource } from './SimpleAggregationSource';
import {
    SimpleAggregationSourceFromJSON,
    SimpleAggregationSourceFromJSONTyped,
    SimpleAggregationSourceToJSON,
} from './SimpleAggregationSource';
import type { SimpleHost } from './SimpleHost';
import {
    SimpleHostFromJSON,
    SimpleHostFromJSONTyped,
    SimpleHostToJSON,
} from './SimpleHost';
import type { SimpleTag } from './SimpleTag';
import {
    SimpleTagFromJSON,
    SimpleTagFromJSONTyped,
    SimpleTagToJSON,
} from './SimpleTag';

/**
 * The full representation of a port
 * @export
 * @interface FullPort
 */
export interface FullPort {
    /**
     * Uuid of the port
     * @type {string}
     * @memberof FullPort
     */
    uuid: string;
    /**
     * Port number
     * @type {number}
     * @memberof FullPort
     */
    port: number;
    /**
     * 
     * @type {PortProtocol}
     * @memberof FullPort
     */
    protocol: PortProtocol;
    /**
     * 
     * @type {PortCertainty}
     * @memberof FullPort
     */
    certainty: PortCertainty;
    /**
     * 
     * @type {SimpleHost}
     * @memberof FullPort
     */
    host: SimpleHost;
    /**
     * A comment to the port
     * @type {string}
     * @memberof FullPort
     */
    comment: string;
    /**
     * The tags this port is linked to
     * @type {Array<SimpleTag>}
     * @memberof FullPort
     */
    tags: Array<SimpleTag>;
    /**
     * The workspace this port is linked to
     * @type {string}
     * @memberof FullPort
     */
    workspace: string;
    /**
     * 
     * @type {SimpleAggregationSource}
     * @memberof FullPort
     */
    sources: SimpleAggregationSource;
    /**
     * 
     * @type {FindingSeverity}
     * @memberof FullPort
     */
    severity?: FindingSeverity | null;
    /**
     * The point in time, the record was created
     * @type {Date}
     * @memberof FullPort
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the FullPort interface.
 */
export function instanceOfFullPort(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "certainty" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "comment" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "sources" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function FullPortFromJSON(json: any): FullPort {
    return FullPortFromJSONTyped(json, false);
}

export function FullPortFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullPort {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'port': json['port'],
        'protocol': PortProtocolFromJSON(json['protocol']),
        'certainty': PortCertaintyFromJSON(json['certainty']),
        'host': SimpleHostFromJSON(json['host']),
        'comment': json['comment'],
        'tags': ((json['tags'] as Array<any>).map(SimpleTagFromJSON)),
        'workspace': json['workspace'],
        'sources': SimpleAggregationSourceFromJSON(json['sources']),
        'severity': !exists(json, 'severity') ? undefined : FindingSeverityFromJSON(json['severity']),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function FullPortToJSON(value?: FullPort | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'port': value.port,
        'protocol': PortProtocolToJSON(value.protocol),
        'certainty': PortCertaintyToJSON(value.certainty),
        'host': SimpleHostToJSON(value.host),
        'comment': value.comment,
        'tags': ((value.tags as Array<any>).map(SimpleTagToJSON)),
        'workspace': value.workspace,
        'sources': SimpleAggregationSourceToJSON(value.sources),
        'severity': FindingSeverityToJSON(value.severity),
        'created_at': (value.createdAt.toISOString()),
    };
}

