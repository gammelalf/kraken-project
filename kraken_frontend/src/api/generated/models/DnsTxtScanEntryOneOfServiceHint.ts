/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DnsTxtScanServiceHintType } from './DnsTxtScanServiceHintType';
import {
    DnsTxtScanServiceHintTypeFromJSON,
    DnsTxtScanServiceHintTypeFromJSONTyped,
    DnsTxtScanServiceHintTypeToJSON,
} from './DnsTxtScanServiceHintType';

/**
 * Just wraps txt_type, the DNS rule is usually more exact to what is actually written in DNS
 * @export
 * @interface DnsTxtScanEntryOneOfServiceHint
 */
export interface DnsTxtScanEntryOneOfServiceHint {
    /**
     * The primary key
     * @type {string}
     * @memberof DnsTxtScanEntryOneOfServiceHint
     */
    uuid: string;
    /**
     * The point in time, this entry was produced
     * @type {Date}
     * @memberof DnsTxtScanEntryOneOfServiceHint
     */
    createdAt: Date;
    /**
     * The rule that was matched for this scan result, usually the whole TXT record.
     * @type {string}
     * @memberof DnsTxtScanEntryOneOfServiceHint
     */
    rule: string;
    /**
     * 
     * @type {DnsTxtScanServiceHintType}
     * @memberof DnsTxtScanEntryOneOfServiceHint
     */
    txtType: DnsTxtScanServiceHintType;
}

/**
 * Check if a given object implements the DnsTxtScanEntryOneOfServiceHint interface.
 */
export function instanceOfDnsTxtScanEntryOneOfServiceHint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "rule" in value;
    isInstance = isInstance && "txtType" in value;

    return isInstance;
}

export function DnsTxtScanEntryOneOfServiceHintFromJSON(json: any): DnsTxtScanEntryOneOfServiceHint {
    return DnsTxtScanEntryOneOfServiceHintFromJSONTyped(json, false);
}

export function DnsTxtScanEntryOneOfServiceHintFromJSONTyped(json: any, ignoreDiscriminator: boolean): DnsTxtScanEntryOneOfServiceHint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'createdAt': (new Date(json['created_at'])),
        'rule': json['rule'],
        'txtType': DnsTxtScanServiceHintTypeFromJSON(json['txt_type']),
    };
}

export function DnsTxtScanEntryOneOfServiceHintToJSON(value?: DnsTxtScanEntryOneOfServiceHint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'created_at': (value.createdAt.toISOString()),
        'rule': value.rule,
        'txt_type': DnsTxtScanServiceHintTypeToJSON(value.txtType),
    };
}

