.input {
    font-family: inherit;
    background-color: var(--level-0);
    color: var(--text);
    padding: 0.5em 1em;
    border: none;
    border-radius: 0.5em;
    box-shadow:
        inset 0 -3px 2em -3px var(--primary-op),
        0 0 10em #0cf3,
        0 0 0.5em #0ff2;
    transition: box-shadow 0.2s ease-out;
}

input[type="color"].input {
    padding: revert;
}

.input:user-invalid,
.input:out-of-range {
    box-shadow:
        inset 0 -3px 2em -3px #f004,
        0 0 10em #f004,
        0 0 0.5em 2px #f004;
}

.button {
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    background-color: var(--level-0);
    border: none;
    border-radius: 0.5em;
    color: var(--text);
    padding: 0.5em 0.5em;
    transition:
        padding linear 500ms,
        margin-top linear 500ms,
        background-color ease-in-out 500ms;
    box-shadow:
        inset 0 -3px 2em var(--primary-op),
        0 0 10em #0cf3,
        0 0 0.5em #0ff2;
}

.button:hover {
    background-color: var(--level-1);
}

.button:active {
    transform: translate(1px, 1px);
}

.textarea {
    background-color: var(--level-0);
    color: var(--text);
    padding: 0.5em 1em;
    border: none;
    border-radius: 0.5em;
    box-shadow:
        inset 0 -3px 2em -3px var(--primary-op),
        0 0 10em #0cf3,
        0 0 0.5em #0ff2;
}

.editable-list {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 0.5em;
}

.editable-list > div:not(:first-child) {
    display: contents;
}

.editable-list > div:first-child {
    grid-column: 1 / 3;
}

.bubble-list {
    display: flex;
    gap: 0.5em;
    flex-wrap: wrap;
}

.bubble {
    padding: 0.25em 1em;
    border-radius: 0.75em;
    border: 1px solid var(--primary-op);
    transition: all ease 200ms;
    cursor: pointer;
}

.bubble:hover {
    box-shadow:
        inset 0 -3px 2em -3px var(--primary-op),
        0 0 10em #0cf3,
        0 0 0.5em #0ff2;
}

.bubble-primary {
    background-color: #00ccff50;
}

.bubble-red {
    background-color: #ff000050;
    border: 1px solid #ff000070;
}

.red {
    background-color: var(--toast-error);
}

.icon-button {
    background-color: transparent;
    border-radius: 0.25em;
}

.icon-button {
    width: 2.75em;
    height: 2em;
    cursor: pointer;
    border: none;
    transition: all ease 200ms;
    background-color: transparent;
}

.icon-button:hover {
    filter: drop-shadow(0 0 1em var(--primary));
}

.icon-button:active {
    transform: translate(1px, 1px);
}

.severity-icon {
    fill: var(--primary-op);
}

.severity-icon-ok .filled {
    fill: hsla(153, 100%, 95%, 0.7);
    stroke: var(--severity-ok-op);
    filter: drop-shadow(0 0 2px var(--severity-ok)) saturate(2);
}

.severity-icon-low .filled {
    fill: hsla(50, 100%, 95%, 0.7);
    stroke: var(--severity-low-op);
    filter: drop-shadow(0 0 2px var(--severity-low)) saturate(2);
}

.severity-icon-medium .filled {
    fill: hsla(32, 100%, 95%, 0.7);
    stroke: var(--severity-medium-op);
    filter: drop-shadow(0 0 2px var(--severity-medium)) saturate(2);
}

.severity-icon-high .filled {
    fill: hsla(0, 100%, 95%, 0.7);
    stroke: var(--severity-high-op);
    filter: drop-shadow(0 0 2px var(--severity-high)) saturate(2);
}

.severity-icon-critical .filled {
    fill: hsla(278, 100%, 95%, 0.7);
    stroke: var(--severity-critical-op);
    filter: drop-shadow(0 0 2px var(--severity-critical)) saturate(2);
}

.start-attack-container {
    display: flex;
    flex-direction: row;
    gap: 2em;
    justify-content: center;
    align-items: center;
}

.start-attack-button {
    background: none;
    border: none;
    padding: 0;
}

.start-attack-container svg {
    width: 5em;
    height: fit-content;
}

.start-attack-container span {
    color: white;
    font-size: 1.5em;
}

/* Style the start-attack svg based on the <form/>'s validity */
form:not(:invalid) .start-attack {
    cursor: pointer;
}

form:not(:invalid) .start-attack path:last-of-type {
    filter: brightness(0) invert() drop-shadow(0 0 4px var(--primary));
}

form:invalid .start-attack path:first-of-type {
    fill-opacity: 10% !important;
    stroke: var(--text);
    fill: var(--primary-op);
}

form:invalid .start-attack path:last-of-type {
    fill: var(--text);
}

.tag-list,
.finding-category-list {
    display: flex;
    gap: 0.5em;
    flex-wrap: wrap;
}

.tag,
.finding-category {
    /* Overwritten by javascript to match the dynamic color stored in db */
    --color: #00ccff20;

    background-color: var(--color);
    border: 1px solid var(--primary-op);
    width: max-content;
    padding: 0.1em 0.7em;
    color: var(--text);
    border-radius: 1em;
}

.tag.interactive:hover,
.finding-category.interactive:hover {
    cursor: pointer;
    box-shadow:
        0 0 1em var(--color),
        0 0 1em rgba(255, 255, 255, 0.2) inset;
}

.finding-category {
    background-color: transparent;
    box-shadow:
        0 0 0 1px var(--color) inset,
        0 0 4px 1px var(--color) inset;
    text-shadow:
        0 0 4px var(--color),
        0 0 10px var(--color),
        0 0 16px var(--color);
    border-radius: 0.2em;
}

::-webkit-scrollbar {
    width: 5px;
}

::-webkit-scrollbar {
    width: 5px;
}

::-webkit-scrollbar-track {
    background: none;
}

::-webkit-scrollbar-thumb {
    background: var(--grey-blue);
    border-radius: 20px;
}

.indicator {
    width: 0.5em;
    height: 0.5em;
    border-radius: 0.5em;
    border: 1px solid white;
    background-color: white;
}

.indicator.off {
    background-color: transparent;
}

/* XXX: fix sizing issue at 100%, upstream PR: https://github.com/JedWatson/react-select/pull/5880 */
.dropdown > input[aria-hidden="true"][value=""] {
    box-sizing: border-box;
}

.dropdown {
    z-index: 10;
}

.model-editor {
    display: flex;
    position: relative;
    text-align: initial;
    width: 100%;
    height: 100%;
}

.model-editor > div {
    width: 100%;
}
