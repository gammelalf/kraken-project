#!/usr/bin/env python3

import os
import typing
import urllib.request

from mitreattack.stix20 import MitreAttackData


FILE = "/tmp/enterprise-attack.json"
URL = "https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json"


class Technique:
    name: str
    ident: str
    id: str
    url: str
    description: str


class Tactic:
    name: str
    ident: str
    id: str
    url: str
    description: str
    techniques: list[Technique]


def main():
    if not os.path.isfile(FILE):
        urllib.request.urlretrieve(URL, FILE)
    data = MitreAttackData(FILE)

    tactics: list[Tactic] = []
    for tactic in data.get_tactics(True):
        tactics.append(Tactic())
        tactics[-1].name = tactic["name"]
        tactics[-1].ident = to_camel_case(tactic["name"])
        tactics[-1].id = tactic["external_references"][0]["external_id"][2:]
        tactics[-1].url = tactic["external_references"][0]["url"]
        tactics[-1].description = tactic["description"].splitlines()[0]
        tactics[-1].techniques = []
        for technique in data.get_techniques_by_tactic(tactic["x_mitre_shortname"], "enterprise-attack", True):
            if technique["x_mitre_is_subtechnique"]:
                continue
            tactics[-1].techniques.append(Technique())
            tactics[-1].techniques[-1].name = technique["name"]
            tactics[-1].techniques[-1].ident = to_camel_case(technique["name"])
            tactics[-1].techniques[-1].id = technique["external_references"][0]["external_id"][1:]
            tactics[-1].techniques[-1].url = technique["external_references"][0]["url"]
            tactics[-1].techniques[-1].description = technique["description"].splitlines()[0]

    print("//! Enums representing the tactics and techniques from [Mitre ATT&CK](https://attack.mitre.org/)")
    print("//!")
    print("//! This file is auto-generated by `utilities/mitre`! Don't edit it directly!")
    print("use crate::InvalidArgumentError;")
    print("use crate::shared::AttackTechnique;")
    print("/// An entry in the [Mitre ATT&CK table](https://attack.mitre.org/)")
    print("pub enum Tactic {")
    for tactic in tactics:
        print(f"    /// [{tactic.name}]({tactic.url})")
        print(f"    ///")
        print(f"    /// {tactic.description}")
        print(f"    {tactic.ident}({tactic.ident}),")
        print("")
    print("}")

    for tactic in tactics:
        print(f"/// [{tactic.name}]({tactic.url})'s techniques")
        print(f"pub enum {tactic.ident} {{")
        for technique in tactic.techniques:
            print(f"    /// [{technique.name}]({technique.url})")
            print(f"    ///")
            print(f"    /// {technique.description}")
            print(f"    {technique.ident},")
            print("")
        print("}")

    print("impl TryFrom<AttackTechnique> for Tactic {")
    print("    type Error = InvalidArgumentError;")
    print("    fn try_from(value: AttackTechnique) -> Result<Self, Self::Error> {")
    print("        let AttackTechnique { tactic, technique } = value;")
    print("        Ok(match tactic {")
    for tactic in tactics:
        print(f"            {tactic.id} => Self::{tactic.ident}({tactic.ident}::try_from(technique)?),")
    print("            _ => return Err(InvalidArgumentError::InvalidMitreTactic(tactic)),")
    print("        })")
    print("    }")
    print("}")

    for tactic in tactics:
        print(f"impl TryFrom<u32> for {tactic.ident} {{")
        print("    type Error = InvalidArgumentError;")
        print("    fn try_from(value: u32) -> Result<Self, Self::Error> {")
        print("        Ok(match value {")
        for technique in tactic.techniques:
            print(f"            {technique.id} => Self::{technique.ident},")
        print(f"            _ => return Err(InvalidArgumentError::InvalidMitreTechnique({tactic.id}, value)),")
        print("        })")
        print("    }")
        print("}")

    print("impl From<Tactic> for AttackTechnique {")
    print("    fn from(value: Tactic) -> Self {")
    print("        let (tactic, technique) = match value {")
    for tactic in tactics:
        print(f"            Tactic::{tactic.ident}(technique) => ({tactic.id}, technique.into()),")
    print("        };")
    print("        AttackTechnique { tactic, technique }")
    print("    }")
    print("}")

    for tactic in tactics:
        print(f"impl From<{tactic.ident}> for u32 {{")
        print(f"    fn from(value: {tactic.ident}) -> Self {{")
        print("        match value {")
        for technique in tactic.techniques:
            print(f"            {tactic.ident}::{technique.ident} => {technique.id},")
        print("        }")
        print("    }")
        print("}")


def to_camel_case(name: str) -> str:
    import re
    return "".join((part.capitalize() for part in re.split("[-/_ ]", name)))


if __name__ == "__main__":
    main()

